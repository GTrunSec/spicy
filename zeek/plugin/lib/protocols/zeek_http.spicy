# Copyright (c) 2020 by the Zeek Project. See LICENSE for details.
#
# Augment standard HTTP grammar with Zeek-specific logic.
#
# TODO: The zeek::rule_*() functions aren't available yet.

module Zeek_HTTP;

import HTTP from protocols;

import zeek;

# function rule_match(msg: HTTP::Message, pt_requ: zeek::PatternType, pt_resp: zeek::PatternType, data: bytes, bol: bool, eol: bool, clear: bool) {
#     if ( msg.is_request )
#        zeek::rule_match(pt_requ, data, bol, eol, clear);
#    else
#        zeek::rule_match(pt_resp, data, bol, eol, clear);
# }

# Create an http_message_state instance.
# TODO: We only set a subst of the fields that we happen to know Zeek needs.
public function create_http_message_stats(msg: HTTP::Message) : tuple<time, bool, bytes, uint64, uint64, uint64> {
    return (cast<time>(0), False, b"", (msg.has_body ? msg.body_len : 0), 0 , 0);
}

on HTTP::RequestLine::%done {
    zeek::confirm_protocol();
    # zeek::rule_match(zeek::PatternType::HTTP_REQUEST, self.uri, True, True, True);
}

# on HTTP::Header::content {
#     rule_match(msg, zeek::PatternType::HTTP_REQUEST_HEADER, zeek::PatternType::HTTP_REPLY_HEADER, self.name + b": " + self.content, True, True, True);
# }

on HTTP::Body::%init priority=10 {
    zeek::file_begin();

    if ( msg?.content_length && msg.use_content_length )
        zeek::file_set_size(msg.content_length);

    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, b"", True, False, True);
}

on HTTP::Body::%done priority=15 {
    zeek::file_end();
    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, b"", False, True, False);
}

on HTTP::Body::%error priority=15 {
    zeek::file_end();
    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, b"", False, True, False);
}

on HTTP::Content::data priority=15 {
    zeek::file_data_in(self.data);
    # rule_match(msg, zeek::PatternType::HTTP_REQUEST_BODY, zeek::PatternType::HTTP_REPLY_BODY, self.data, False, False, False);
}
